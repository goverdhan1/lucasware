<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop      http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
		">


	<aop:aspectj-autoproxy />
	<context:component-scan base-package="com.lucas.profile" />
	<context:component-scan base-package="com.lucas.services" />
	<context:component-scan base-package="com.lucas.dao" />
	
	<bean id="locationService" class="com.lucas.services.location.LocationServiceImpl">
		<lookup-method name="createLocation" bean="location"/>
	</bean>
	
	<!-- Note this can be configured via annotations also, but has been left here to demonstrate that xml works too! -->
	<bean id ="defaultLocationScheme" class="com.lucas.services.location.DefaultLocationScheme" >
		<constructor-arg index="0">
			<ref bean="locationSchemePartList"/>
		</constructor-arg>
		<constructor-arg index="1" >
			<ref bean="locationSchemeSeparator"/>
		</constructor-arg>
	</bean>
	
	<bean id="locationSchemeSeparator" class="java.lang.String">
  		<constructor-arg value="-"/>
	</bean>
	
	<!-- This list specifies the order AND number of the LocationParts. So a valid LocationScheme configured with this list may be: -->
	<!-- ZON-BY-A1-L2-SL3, but never ZON-BY-A1-SL3-L2  //Wrong order -->
	<!-- ZON-BY-A1-L2-SL3, but never ZON-BY-A1-L2  //Wrong number -->
	<!-- Note: if the list was: ZONE, BAY, AISLE then the following is a valid location: -->
	<!-- ZON-BY2-AIL3, but never  ZON-BY-A1-L2-SL3 //Wrong number-->
	<!-- ZON-BY2-AIL3, but never  ZON-BY //Wrong number-->
	<!-- Also note that this list cannot contain duplicates -->
	
	<util:list id="locationSchemePartList" value-type="com.lucas.entity.location.LocationPartType">
	    <value>ZONE</value>
	    <value>AISLE</value>
	    <value>BAY</value>
	    <value>LEVEL</value>
	    <value>SLOT</value>
	</util:list>
	
	<!-- For sample purposes, if a different locationScheme needs to be configured,  -->
	<!-- this scheme can serve as a sample of using a FactoryBean pattern instead of ctor injection -->
	<!-- as is the case for DefaultLocationScheme  -->	
	<bean id ="linearLocationScheme" class="com.lucas.services.location.LinearLocationScheme" />
    
		

</beans>
